(ns bones.http.handlers-test
  (:require [bones.http.handlers :as handlers]
            [bones.http.auth :as auth :refer [token]]
            [clojure.test :refer [deftest testing is]]
            [clojure.edn :as edn]
            [io.pedestal.test :refer [response-for]]
            [io.pedestal.http :as bootstrap]
            [io.pedestal.http.route.definition :refer [defroutes]]
            [bones.http.service :as service]
            [ring.mock.request :as mock]
            [ring.middleware.session.store :as store]
            [ring.util.codec :as codec]
            [schema.core :as s]
            ))

(defn hello [args req]
  ;; (println req )
  (let [who (get-in args [:who])]
    {:message (str "hello " who)}))

(handlers/register-command :hello {:who s/Str})

(defn thrower [args req]
  (throw (ex-info "something fake" {:other "stuff" :status 555})))

(handlers/register-command :thrower {:what s/Keyword})

(defn edn-request [body]
  (-> (mock/request :post "/" (pr-str body))
      (mock/content-type "application/edn")))

(defn edn-body [{:keys [body]}]
  (-> body edn/read-string))

(def routes (-> (handlers/map->CQRS {}) .start :routes))

(def service
  (::bootstrap/service-fn (bootstrap/create-servlet (service/service routes {}))))

(defn edn-post
  ([body-params]
   (edn-post body-params {}))
  ([body-params headers]
   (response-for service
                 :post "/api/command"
                 :body (pr-str body-params)
                 :session {:identity 123}
                 :headers (merge {"Content-Type" "application/edn"
                                  "Accept" "application/edn"}
                                 headers))))

(defn edn-get [path]
  (response-for service
                :get path
                :headers {"Content-Type" "application/edn"
                          "Accept" "application/edn"}))

(def valid-cookie
  ;; session must have identity in it for buddy
  ;; can't generate a valid cookie for some reason
  ;; need to use one generated by ring/session
  (let [
        ;; I thought it would be something like this
        ;; session (auth/session {:identity {:user-d 123}})
        session "vRu8o3avetgkDgiLqyCJ6T75m6V8fjt6VnRP3klThvz7ackbHcXLoaMX6izXeT4F--JtGidgQhNx3CmWYeNxWgl1t2mGWjW56pg8KVnAfZ2F8="
        cookie (codec/url-encode session)]
    {"Cookie" (str "bones-session=" cookie ";")}))

(def valid-token
  ;; any data will do here I think?
  {"authorization" (str "Token " (token {:identity {:user-d 123}}))})

(deftest register-command-test
  (testing "optional handler argument"
    (is (handlers/register-command :test {} ::hello)))
  (testing "explicit handler with a namespace"
    (is (handlers/register-command :test {} ::handlers/echo)))
  (testing "non existing function throws error"
    (is (thrown? clojure.lang.ExceptionInfo
                 (handlers/register-command :nope {})))))

(deftest command-resource-test
  (testing "non-existant args"
    (let [response (edn-post {:command :echo #_no-args})]
      (is (= (:body response) "{:args missing-required-key}"))
      (is (= (get (:headers response) "Content-Type") "application/edn"))
      (is (= (:status response) 401))))

  (testing "non-existant command"
    (let [response (edn-post {:command :nuthin})]
      ;; available-commands left out
      (is (contains? (edn-body response) :available-commands))
      (is (= (get (:headers response) "Content-Type") "application/edn"))
      (is (= (:status response) 401))))

  (testing "args that are something other than a map"
    (let [response (edn-post {:command :echo :args [:not :a-map]})]
      (is (= (:body response) "{:args (not (map? [:not :a-map]))}"))
      (is (= (get (:headers response) "Content-Type") "application/edn"))
      (is (= (:status response) 401))))

  (testing "built-in echo command with valid args"
    (let [response (edn-post {:command :echo :args {:yes :allowed}} valid-token)]
      (is (= (:body response) "{:yes :allowed}"))
      (is (= (get (:headers response) "Content-Type") "application/edn"))
      (is (= (:status response) 200))))

  (testing "registered command with valid args"
    (let [body-params {:command :hello :args {:who "mr teapot"}}
          response (edn-post body-params valid-token)]
      (is (= (:body response) "{:message \"hello mr teapot\"}"))
      (is (= (get (:headers response) "Content-Type") "application/edn"))
      (is (= (:status response) 200))))

  (testing "an exception's ex-data gets rendered and status gets used"
    (let [body-params {:command :thrower :args {:what :blowup}}
          response (edn-post body-params valid-token)]
      (is (= (get (:headers response) "Content-Type") "application/edn"))
      (is (= "{:other \"stuff\"}" (:body response)))
      (is (= 555 (:status response))))))

(deftest cookie-session-test
  (testing "Set-Cookie is set on response if cookie exists on request"
    (let [body-params {:command :hello :args {:who "mr teapot"}}
          response (edn-post body-params valid-cookie)]
      (is (contains? (:headers response) "Set-Cookie")))))

(deftest command-list-resource-test
  (testing "get"
    (let [response (edn-get "/api/command")]
      (is (= (:body response) "({:args {Any Any}, :command (enum :echo)} {:args {:who java.lang.String}, :command (enum :hello)})"))
      (is (= (get (:headers response) "Content-Type") "application/edn"))
      (is (= (:status response) 200)))))
